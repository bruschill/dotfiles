"GENERAL SETTINGS
" base gui/program settings
    filetype plugin on 
    filetype indent on 


    set encoding=utf-8

    set guioptions-=T                   "remove ugly toolbar
    set guioptions-=R
    set guioptions-=r                   "remove right scrollbar
    set guioptions-=L
    set guioptions-=l                   "remove left scrollbar
    set guioptions-=b                   "remove bottom scrollbar
    set guioptions-=m                   "remove file menus

    set t_Co=256
    set guifont=Inconsolata\ 12

    colorscheme mustang

    runtime /usr/share/vim/vim73/macros/matchit.vim
" folding settings
    syntax region regionFold start="//region" end="//endregion" transparent fold keepend      
    syntax enable                       

    set foldmethod=syntax               " Set folding method to determine folds by using language syntax file

" spacing settings
    set backspace=indent,eol,start      " Allow backspacing over autoindent, line breaks and start of insert action
    set wildmenu                        " When 'wildmenu' is on, command-line completion operates in an enhanced mode. command-line completion in an enhanced mode 
    set tabstop=4                       " Define number of spaces a tab indents during editing session
    set shiftwidth=4				    " Define number of spaces used when the indent is increased or decreased
    set expandtab                       " Expand all tabs to their equivalent representation using spaces
	set smarttab

" search settings
    set hlsearch                        " Highlight all matches of most recent search pattern.  Use :nohlsearch to remove highlighting
    set incsearch                       " Increasingly search, updating after each letter is typed

" backup and file settings
    set backup                          " Create a backup file when overwriting an existing file.
    set backupdir=~/.vim/.tmp/
    set writeany                        " Allow saving to any file
    set autoread                        " Automatically read in file currently being edited if it has changed

"other settings
    set nocompatible                    " Turn of vi compatibility (required by project plugin)
    set mouse=a                         " Enable mouse in all vim modes
    set browsedir=current               " Set the directory for which the file browser should start in when being opened
    set complete+=k                     " Scan the files given with the 'dictionary' option
    set showcmd                         " Show (partial) command in the last line of the screen.
    set nowrap                          " Turn of the line wrapping of lines longer than the width of the window do not wrap lines 
	set showmatch
    set number                          " Display line number on left
    set confirm                         " Instead of failing a command because of unsaved changes, instead raise a dialogue asking if you wish to save changed files.
    set hidden                          " Allows switching between buffers without having to save.  Also, allows for undo buffers on multiple files

" key mappings
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif

    nnoremap    <silent> <C-S-n>            :bn<CR>
    nnoremap    <silent> <C-S-p>            :bp<CR>
    nnoremap    <silent> <C-S-c>            :bd<CR>

    nmap        <silent> <Leader>vr         :so $MYVIMRC<CR>
    nmap        <silent> <Leader>ve         :e $MYVIMRC<CR>

    map         <silent> <Leader>X          :call SetExecutable()<CR>
    inoremap    <F1> <Esc>
    noremap     <F1>                        :call MapF1()<CR>

    function! MapF1()
        if &buftype == "help"
            exec 'quit'
        else
            exec 'help'
        endif
    endfunction

" PLUGIN SETTINGS
" autocomplPop
    let g:acp_behaviorkeywordlength=2
    let g:acp_behaviorperlomnilength=1

" bash-support
    let g:sh_fold_enabled = 1

" c.vim
    let g:c_guisnippetbrowser = 'commandline'           " use the command line to select snippet, rather than gui
    let g:c_guitemplatebrowser = 'explorer'             " use file-explorer (:explore) to browse templates
    let g:c_dictionary_file =   '/home/brandon/.vim/c-support/wordlists/c-c++-keywords.list'

" omnicppcomplete
    " let OmniCpp_NamespaceSearch = 2
    " let OmniCpp_ShowPrototypeInAbbr = 1
    " let OmniCpp_SelectFirstItem = 2
    " let OmniCpp_DefaultNamespaces = ['string', 'std']
    " let OmniCpp_MayCompleteScope = 1
